// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  category  String   @unique
  catid     String   @id
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Service {
  ino   Int    @id @default(autoincrement())
  iname String @db.VarChar(75)
  rate1 Int
  rate2 Int
  rate3 Int
  rate4 Int
  rate5 Int
  itype String @db.VarChar(30)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Order {
  orderNumber   Int       @id @default(autoincrement())
  dueDate       DateTime?
  dueTime       DateTime? @db.Time
  customer      String    @db.VarChar(255)
  totalQuantity Int
  orderStatus   String    @db.VarChar(200)
}

model Customer {
  cid    Int     @id @default(autoincrement())
  cname  String  @db.VarChar(255)
  mobile String  @unique @db.VarChar(15)
  add1   String  @db.VarChar(255)
  rtype  String? @default("regular") @db.VarChar(50)
}

model Invoice {
  id                 Int              @id @default(autoincrement())
  add1               String
  advancePaid        Float
  cname              String
  discountAmount     Float
  dueDate            DateTime?
  gst                Float
  mobile             String
  remainingAmount    Float
  totalAfterDiscount Float
  totalAfterGST      Float
  totalAmount        Float
  services           InvoiceService[]
}

model InvoiceService {
  id        Int     @id @default(autoincrement())
  invoiceId Int
  ino       Int?
  iname     String
  quantity  Int     @default(1)
  notes     String?
  rate      Float
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
}
